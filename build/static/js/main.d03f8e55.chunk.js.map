{"version":3,"sources":["navbar.js","index.js"],"names":["NavBarBackground","backgroundColor","logoNextel","color","fontSize","Example","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","toggle","bind","_assertThisInitialized","state","isOpen","_createClass","key","value","setState","React","createElement","Navbar","style","light","expand","NavbarBrand","href","NavbarToggler","onClick","Component","divStyle","width","height","padding","borderSize","borderColor","position","borderRadius","marginLeft","labelPreview","fontWeight","margin","textAlign","buttontyle","border","editorHTML","App","exportHtml","editor","data","blob","Blob","html","type","saveAs","concat","titleFile","modal","previewHtml","exportHTML","handleChange","event","target","exportHTMl","prevState","_this2","console","log","Modal","className","ModalHeader","ModalBody","InputGroup","InputGroupAddon","addonType","Input","onChange","ModalFooter","Button","NavBar","EmailEditor","ref","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d03f8e55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, NavbarToggler, NavbarBrand } from \"reactstrap\";\r\n\r\nconst NavBarBackground = {\r\n  backgroundColor: \"#1ac\"\r\n};\r\nconst logoNextel = {\r\n  color: \"#fff\",\r\n  fontSize: 20\r\n};\r\nexport default class Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar style={NavBarBackground} light expand=\"md\">\r\n          <NavbarBrand href=\"/\" style={logoNextel}>\r\n            Gerador de Email Marketing\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport EmailEditor from \"react-email-editor\";\r\nimport \"./styles.css\";\r\nimport { saveAs } from \"file-saver\";\r\nimport {\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport NavBar from \"./navbar\";\r\n\r\nconst divStyle = {\r\n  width: \"95%\",\r\n  backgroundColor: \"#f5f2f0\",\r\n  height: \"40% auto\",\r\n  padding: 10,\r\n  borderSize: 1,\r\n  borderColor: \"#ccc\",\r\n  position: \"absolute\",\r\n  borderRadius: 10,\r\n  marginLeft: 45\r\n};\r\nconst labelPreview = {\r\n  fontWeight: \"bold\",\r\n  margin: 10,\r\n  textAlign: \"center\"\r\n};\r\nconst buttontyle = {\r\n  height: \"40\",\r\n  padding: 10,\r\n  margin: 10,\r\n  border: \"none\"\r\n};\r\nconst editorHTML = {\r\n  height: 500\r\n};\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      exportHTMl: \"\",\r\n      titleFile: \"\",\r\n      modal: false\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n  exportHtml = () => {\r\n    this.editor.exportHtml(data => {\r\n      var blob = new Blob([data.html], { type: \"text/html;charset=utf-8\" });\r\n      saveAs(blob, `${this.state.titleFile}.html`);\r\n    });\r\n    this.setState({\r\n      modal: false\r\n    });\r\n  };\r\n  previewHtml = () => {\r\n    this.editor.exportHtml(data => {\r\n      const { html } = data;\r\n      this.setState({\r\n        exportHTML: html\r\n      });\r\n    });\r\n  };\r\n  handleChange = event => {\r\n    this.setState({ titleFile: event.target.value });\r\n  };\r\n  render() {\r\n    console.log(this.state.titleFile);\r\n    return (\r\n      <div>\r\n        {/* INICIO DO MODAL */}\r\n        <Modal\r\n          isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          className={this.props.className}\r\n        >\r\n          <ModalHeader toggle={this.toggle}>\r\n            Qual o nome do seu arquivo?\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <InputGroup>\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                Nome do Arquivo\r\n              </InputGroupAddon>\r\n              <Input\r\n                value={this.state.titleFile}\r\n                onChange={this.handleChange}\r\n              />\r\n            </InputGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"success\" onClick={this.exportHtml}>\r\n              Baixar\r\n            </Button>{\" \"}\r\n            <Button color=\"danger\" onClick={this.toggle}>\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n        {/* FINAL  DO MODAL */}\r\n        <NavBar />\r\n        <div>\r\n          <EmailEditor\r\n            ref={editor => (this.editor = editor)}\r\n            style={editorHTML}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button color=\"success\" style={buttontyle} onClick={this.toggle}>\r\n            Baixar HTML\r\n          </Button>\r\n          <Button color=\"primary\" style={buttontyle} onClick={this.previewHtml}>\r\n            Preview\r\n          </Button>\r\n        </div>\r\n        <div style={divStyle}>\r\n          <div style={labelPreview}>Preview do HTML</div>\r\n          <div>{this.state.exportHTML}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}